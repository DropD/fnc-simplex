/***** Automatically Generated File *****
 * This file is automatically generated from
 * hw06/tmpl/timerC.tmpl by cheetah during the build process
 * 
 * changes will be overwritten
 */
#include "../include/rdtsc.h"
#include "../include/${func.header}"

#define NUM_RUNS 1
#define CYCLES_REQUIRED 1e8
//#define CALIBRATE

double time_${func.name}(${func.signature}) {
    int i, num_runs;
    double cycles;
    tsc_counter start, end;

    num_runs = NUM_RUNS;

    /*
    * The CPUID instruction serializes the pipeline.
    * Using it, we can create execution barriers around the code we want to time.
    * The calibrate section is used to make the computation large enough so as to
    * avoid measurements bias due to the timing overhead.
    */
#ifdef CALIBRATE
  while(num_runs < (1 << 14)) {
      CPUID(); RDTSC(start);
      for (i = 0; i < num_runs; ++i) {
          ${func.name}(${func.args});
      }
      RDTSC(end); CPUID();

      cycles = (double)(COUNTER_DIFF(end, start));

      if(cycles >= CYCLES_REQUIRED) break;

      num_runs *= 2;
  }
#endif

  CPUID(); RDTSC(start);
  for (i = 0; i < num_runs; ++i) {
    ${func.name}($func.args);
  }
  RDTSC(end); CPUID();

  cycles = (double)(COUNTER_DIFF(end, start))/num_runs;
  return cycles;
}
